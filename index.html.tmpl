<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" type="image/png" href="icon.png">
  <style>
    table {
      border-collapse: collapse;
      width: 100%;
      table-layout: fixed;
    }
    table, th, td {
      border: 1px solid lightgray;
    }
    th, td {
      height: 2rem;
      padding: 0 0.5rem;
      white-space: nowrap;
      overflow: scroll;
    }
    th {
      background-color: beige;
    }
    input {
      padding: 0.5rem 0.25rem;
    }
    #page_controls > button {
      margin: 1rem;
      padding: 0.5rem 1.5rem;
    }
  </style>
  <script>
    window.data = {{data}}
    window.pageIndex = 0
    window.pageSize = 20
    window.food_categories = {
      '1': 'Dairy & Eggs',
      '2': 'Herbs',
      '9': 'Fruits',
      '11': 'Veggies',
      '12': 'Seeds',
      '15': 'Fish',
      '16': 'Legumes',
      '20': 'Grains'
    }

    const DENOMINATOR_WEIGHT = '100 g weight'
    const DENOMINATOR_ENERGY = '100 kcal'
    const DENOMINATOR_FAT = '1 g fat'

    const CONSUMER = {
      MALE_0_6_MO: 'Male (0 through 6 mo)',
      MALE_7_12_MO: 'Male (7 through 12 mo)',
      MALE_1_3_Y: 'Male (1 through 3 y)',
      MALE_4_8_Y: 'Male (4 through 8 y)',
      MALE_9_13_Y: 'Male (9 through 13 y)',
      MALE_14_18_Y: 'Male (14 through 18 y)',
      MALE_19_30_Y: 'Male (19 through 30 y)',
      MALE_31_50_Y: 'Male (31 through 50 y)',
      MALE_51_70_Y: 'Male (51 through 70 y)',
      MALE_71_Y: 'Male (> 70 y)',
      FEMALE_0_6_MO: 'Female (0 through 6 mo)',
      FEMALE_7_12_MO: 'Female (7 through 12 mo)',
      FEMALE_1_3_Y: 'Female (1 through 3 y)',
      FEMALE_4_8_Y: 'Female (4 through 8 y)',
      FEMALE_9_13_Y: 'Female (9 through 13 y)',
      FEMALE_14_18_Y: 'Female (14 through 18 y)',
      FEMALE_19_30_Y: 'Female (19 through 30 y)',
      FEMALE_31_50_Y: 'Female (31 through 50 y)',
      FEMALE_51_70_Y: 'Female (51 through 70 y)',
      FEMALE_71_Y: 'Female (> 70 y)',
      PREGNANCY_UNDER_18_Y: 'Pregnancy (<= 18 y)',
      PREGNANCY_19_50_Y: 'Pregnancy (19 through 50 y)',
      LACTATION_UNDER_18_Y: 'Lactation (<= 18 y)',
      LACTATION_19_50_Y: 'Lactation (19 through 50 y)'
    }

    function configureDenominatorSelector() {
      const denominator_selector = document.getElementById("denominator_selector")
      for (let denominator of [
            DENOMINATOR_WEIGHT, DENOMINATOR_ENERGY, DENOMINATOR_FAT]) {
        let option = document.createElement("option")
        option.value = denominator
        option.innerText = denominator
        denominator_selector.appendChild(option)
      }

      denominator_selector.addEventListener("change", event => {
        window.pageIndex = 0
        rerender()
      })
    }

    function configureConsumerSelector(DRI) {
      const consumer_selector = document.getElementById("consumer_selector")
      for (let consumer of Object.keys(DRI)) {
        let option = document.createElement("option")
        option.value = consumer
        option.innerText = consumer
        consumer_selector.appendChild(option)
      }

      consumer_selector.addEventListener("change", event => {
        window.pageIndex = 0
        rerender()
      })
    }

    function configureNutrientSelector(nutrient_groups) {
      const nutrient_selector = document.getElementById("nutrient_selector")
      const nutrient_ids = new Set()
      const nutrients = []
      for (let row of window.data.nutrients) {
        const id = row[2]
        if (nutrient_ids.has(id)) continue
        nutrient_ids.add(id)
        nutrients.push({
          id,
          name: nutrient_groups[id] ? nutrient_groups[id].nutrient_name : row[3] })
      }

      nutrients.sort((a, b) => a.name.localeCompare(b.name))

      function by_group(group) {
        return n => nutrient_groups[n.id] &&
                    nutrient_groups[n.id].group_name === group
      }

      const vitamins = nutrients.filter(by_group('vitamin'))
      const element = nutrients.filter(by_group('element'))
      const macro = nutrients.filter(by_group('macronutrient'))
      const aminoacid = nutrients.filter(by_group('aminoacid'))
      const other = nutrients.filter(n => !nutrient_groups[n.id])

      function createOptionGroup(label, nutrients) {
        let optgroup = document.createElement("optgroup")
        optgroup.label = label
        for (let nutrient of nutrients) {
          let option = document.createElement("option")
          option.value = nutrient.id
          option.innerText = nutrient.name
          optgroup.appendChild(option)
        }
        return optgroup
      }

      nutrient_selector.appendChild(createOptionGroup("Vitamins", vitamins))
      nutrient_selector.appendChild(createOptionGroup("Elements", element))
      nutrient_selector.appendChild(createOptionGroup("Macro Nutrients", macro))
      nutrient_selector.appendChild(createOptionGroup("Amino Acids", aminoacid))
      nutrient_selector.appendChild(createOptionGroup("Other", other))

      nutrient_selector.addEventListener("change", event => {
        window.pageIndex = 0
        rerender()
      })
    }

    function configureCategoriesSelector() {
      const categories_selector = document.getElementById("categories_selector")
      const category_ids = new Set()
      const categories = []
      for (let row of window.data.nutrients) {
        const id = row[1]
        if (category_ids.has(id)) continue
        category_ids.add(id)
        categories.push({ id, name: window.food_categories[id]})
      }

      for (let category of categories) {
        let label = document.createElement("label")

        let input = document.createElement("input")
        input.checked = true
        input.type = "checkbox"
        input.id = category.id
        input.addEventListener("change", event => {
          window.pageIndex = 0
          rerender()
        })
        label.appendChild(input)

        let text = document.createTextNode(category.name)
        label.appendChild(text)

        categories_selector.appendChild(label)
      }
    }

    function percent_completion(daily_dose, food_dose) {
      const rdi_unit = daily_dose.unit
      const rdi_value = daily_dose.amount
      const food_unit = food_dose.unit
      const food_value = food_dose.amount

      const conversions = {
        'g': {
          'g': 1,
          'l': 0.001,
          'mg/kg': 1000 / 70,
        },
        'mg': {
          'mg': 1,
        },
        'ug': {
          'mcg': 1,
        }

      }
      const multiplier = conversions[food_unit.toLowerCase()][rdi_unit.toLowerCase()]
      if (multiplier)
        return food_value * multiplier * 100 / rdi_value
      console.log({daily_dose, food_dose})
      throw Error('Unsupported unit conversion')
    }

    function configureTableHeader(has_dri) {
      const thead = document.createElement('thead')
      const header_row = document.createElement('tr')

      let food_th = document.createElement('th')
      food_th.innerText = 'Food'
      header_row.appendChild(food_th)

      let amount_th = document.createElement('th')
      amount_th.innerText = "Amount"
      header_row.appendChild(amount_th)

      if (has_dri) {
        let dri_th = document.createElement('th')
        dri_th.innerText = "DRI"
        header_row.appendChild(dri_th)

        let percent_dri_th = document.createElement('th')
        percent_dri_th.innerText = "% DRI"
        header_row.appendChild(percent_dri_th)
      }

      thead.appendChild(header_row)

      document.getElementById('data_table').appendChild(thead)
    }

    function configureDataTable() {
      const data_table = document.getElementById("data_table")
      data_table.innerText = ''

      const consumer = document.getElementById("consumer_selector").value
      const consumer_dri = window.DRI[consumer]
      const nutrient = document.getElementById("nutrient_selector").value
      let daily_dose = consumer_dri[nutrient]

      configureTableHeader(!!daily_dose)

      const food_categories = document.getElementById("categories_selector")
      const selectors = food_categories.getElementsByTagName("input")
      let desired_categories = []
      for (let selector of selectors) {
        if (selector.checked) {
          desired_categories.push(selector.id)
        }
      }

      const denominator = document.getElementById("denominator_selector").value

      const food_filter = document.getElementById("food_filter").value.toLowerCase()

      let tbody = data_table.createTBody()

      let filteredData = window.data.nutrients.filter(row => {
        return desired_categories.includes(row[1]) && row[2] === nutrient
      })
      if (food_filter) {
        filteredData = filteredData.filter(row => {
          return row[0].toLowerCase().includes(food_filter)
        })
      }

      if (denominator === DENOMINATOR_ENERGY) {
        filteredData.sort((a, b) => {
          return parseFloat(b[6]) - parseFloat(a[6])
        })
      } else if (denominator === DENOMINATOR_FAT) {
        filteredData.sort((a, b) => {
          return parseFloat(b[7]) - parseFloat(a[7])
        })
      } else if (denominator === DENOMINATOR_WEIGHT) {
        filteredData.sort((a, b) => {
          return parseFloat(b[5]) - parseFloat(a[5])
        })
      }

      const num_pages = filteredData.length % window.pageSize == 0 ?
        filteredData.length / window.pageSize :
        (Math.floor(filteredData.length / window.pageSize) + 1)

      let amount_units = ''

      for (let [j, row] of filteredData.entries()) {
        if (j < pageIndex * window.pageSize) continue;
        if (j === (pageIndex + 1) * window.pageSize) break;

        let tr = document.createElement("tr")

        const food_name = row[0]
        let td = document.createElement("td")
        td.innerText = food_name
        tr.appendChild(td)

        let nutrient_amount
        if (denominator === DENOMINATOR_WEIGHT) {
          nutrient_amount = row[5]
        } else if (denominator === DENOMINATOR_ENERGY) {
          nutrient_amount = row[6]
        } else if (denominator === DENOMINATOR_FAT) {
          nutrient_amount = row[7]
        }
        const food_unit = row[4].toLowerCase()
        td = document.createElement("td")
        td.style.textAlign = 'right'
        td.innerText = `${nutrient_amount}${food_unit}`
        tr.appendChild(td)

        if (daily_dose) {
          let td = document.createElement("td")
          td.style.textAlign = 'right'
          td.innerText = `${daily_dose.amount}${daily_dose.unit}`
          tr.appendChild(td)

          td = document.createElement("td")
          td.style.textAlign = 'right'
          const percent = percent_completion(
            daily_dose, {amount: nutrient_amount, unit: food_unit}
          )
          td.innerText = percent.toFixed(1)
          tr.appendChild(td)
        }
        tbody.appendChild(tr)
      }
      return num_pages
    }

    function rerender() {
      const num_pages = configureDataTable()

      let pageNumber = document.getElementById("page_number")
      pageNumber.innerText = `${window.pageIndex + 1} / ${num_pages}`
    }

    function configurePagination() {
      let prevBtn = document.getElementById("prev_page")
      prevBtn.addEventListener("click", event => {
        window.pageIndex--
        if (window.pageIndex === 0) {
          prevBtn.disabled = true
        }
        rerender()
      })

      let nextBtn = document.getElementById("next_page")
      nextBtn.addEventListener("click", event => {
        if (window.pageIndex === 0) {
          let prevBtn = document.getElementById("prev_page")
          prevBtn.disabled = false
        }
        window.pageIndex++
        rerender()
      })
    }

    function configureFoodFilter() {
      let filter = document.getElementById("food_filter")
      filter.addEventListener("keyup", event => {
        rerender()
      })
    }

    function configureDri() {
      let DRI = {}
      for (let row of window.data.dri) {
        const fdc_nutrient_id = row[1]
        const dri_value = {unit: row[4], amount: row[5]}

        let life_stage = row[6]
        const consumer_sex = row[7]
        if (consumer_sex) {
          life_stage = `${consumer_sex} (${life_stage})`
        }

        if (!DRI[life_stage]) DRI[life_stage] = {}
        if (!DRI[life_stage][fdc_nutrient_id]) DRI[life_stage][fdc_nutrient_id] = {}

        DRI[life_stage][fdc_nutrient_id] = dri_value

        window.DRI = DRI
      }
      configureConsumerSelector(window.DRI)

      const nutrient_groups = {}
      for (let row of window.data.dri) {
        const fdc_nutrient_id = row[1]
        const nutrient_name = row[2]
        const group_name = row[9]
        nutrient_groups[fdc_nutrient_id] = { group_name, nutrient_name }
      }

      configureNutrientSelector(nutrient_groups)
    }

    window.addEventListener('load', event => {
      configureDri()
      configureCategoriesSelector()
      configureDenominatorSelector()
      configurePagination()
      configureFoodFilter()
      rerender()
    })

  </script>
</head>
<body>
  <div id="categories_selector"
       style="padding: 0.5rem 0; display: flex; justify-content: space-between;">
    <strong>Categories:</strong>
  </div>
  <div style="padding: 0.5rem 0; display: flex;">
    <div style="flex: 4;">
      <strong>Nutrient:</strong>
      <select id="nutrient_selector"
              style="padding: 0.5rem; border: none; outline: none;"></select>
    </div>
    <div style="flex: 4;">
      <strong>Per:</strong>
      <select id="denominator_selector"
              style="padding: 0.5rem; border: none; outline: none;"></select>
    </div>
    <div style="flex: 4;">
      <strong>For:</strong>
      <select id="consumer_selector"
              style="padding: 0.5rem; border: none; outline: none;"></select>
    </div>
  </div>
  <div style="padding: 0.5rem 0;">
    <strong>Food filter:</strong>
    <input id="food_filter" style="margin-left: 1rem; width: 25rem;">
  </div>
  <table id="data_table">
  </table>
  <div style="display: flex; align-items: baseline; justify-content: space-between;">
    <div>Food nutrient data is provided by <i>U.S. Department of Agriculture, Agricultural Research Service. FoodData Central, 2019. <a href="https://fdc.nal.usda.gov/">fdc.nal.usda.gov</a>.</i></div>
    <div id="page_controls"
         style="display: flex; align-items: baseline;">
      <button disabled id="prev_page">Prev</button>
      <div id="page_number">1</div>
      <button id="next_page">Next</button>
    </div>
  </div>
</body>
</html>
